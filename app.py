import streamlit as st
import joblib
import numpy as np
import pandas as pd

# üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
model = joblib.load('model/rf_model.pkl')
label_encoder = joblib.load('model/label_encoder.pkl')
symptom_list = joblib.load('model/symptom_list.pkl')

# üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ CSV
precautions_df = pd.read_csv('data/symptom_precaution.csv')
desc_df = pd.read_csv('data/symptom_Description.csv')
severity_df = pd.read_csv('data/Symptom-severity.csv')
severity_df['Symptom'] = severity_df['Symptom'].str.strip().str.lower()

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–∏–º–ø—Ç–æ–º–æ–≤
def clear_symptoms():
    st.session_state["symptoms"] = []

# üñº –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏", layout="centered")
st.title("ü©∫ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏ –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º")
st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç–µ —É —Å–µ–±—è:")

# üßæ –ú—É–ª—å—Ç–∏–≤—ã–±–æ—Ä —Å–∏–º–ø—Ç–æ–º–æ–≤
selected_symptoms = st.multiselect(
    "–°–∏–º–ø—Ç–æ–º—ã:",
    symptom_list,
    key="symptoms"
)

# üîÅ –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
st.button("üîÅ –û—á–∏—Å—Ç–∏—Ç—å", on_click=clear_symptoms)

# üß† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
input_vector = [1 if symptom in selected_symptoms else 0 for symptom in symptom_list]

# üîç –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
if st.button("üîç –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å"):
    if not selected_symptoms:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∏–º–ø—Ç–æ–º.")
    else:
        # üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        probs = model.predict_proba([input_vector])[0]
        prediction = model.predict([input_vector])[0]
        disease = label_encoder.inverse_transform([prediction])[0]
        confidence = round(max(probs) * 100, 2)

        st.success(f"üßæ –í–æ–∑–º–æ–∂–Ω–∞—è –±–æ–ª–µ–∑–Ω—å: **{disease}**")
        st.info(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: **{confidence}%**")

        # ü©ª –¢—è–∂–µ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º–æ–≤
        severity_values = []
        for symptom in selected_symptoms:
            symptom_clean = symptom.strip().lower()
            row = severity_df[severity_df['Symptom'] == symptom_clean]
            if not row.empty:
                severity_values.append(int(row['weight'].values[0]))

        if severity_values:
            avg_severity = round(sum(severity_values) / len(severity_values), 2)
            st.markdown(f"### ü©ª –°—Ä–µ–¥–Ω—è—è —Ç—è–∂–µ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º–æ–≤: **{avg_severity} / 5**")

            if avg_severity >= 4:
                st.error("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è —Ç—è–∂–µ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º–æ–≤ ‚Äî –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É!")
            elif avg_severity >= 2.5:
                st.warning("‚ùó –°—Ä–µ–¥–Ω—è—è —Ç—è–∂–µ—Å—Ç—å ‚Äî –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.")
            else:
                st.success("‚úÖ –°–∏–º–ø—Ç–æ–º—ã –≤—ã—Ä–∞–∂–µ–Ω—ã —Å–ª–∞–±–æ.")
        else:
            st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å —Ç—è–∂–µ—Å—Ç—å ‚Äî –ø—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∏–º–ø—Ç–æ–º–æ–≤.")

        # ü©π –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        matching_row = precautions_df[precautions_df['Disease'].str.lower() == disease.lower()]
        if not matching_row.empty:
            st.markdown("### ü©π –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for i in range(1, 5):
                advice = matching_row[f'Precaution_{i}'].values[0]
                if pd.notna(advice):
                    st.markdown(f"- {advice}")
        else:
            st.warning("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è.")

        # üìò –û–ø–∏—Å–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏
        desc_row = desc_df[desc_df['Disease'].str.lower() == disease.lower()]
        if not desc_row.empty:
            description = desc_row['Description'].values[0]
            st.markdown("### üìò –û–ø–∏—Å–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏:")
            st.markdown(f"{description}")
        else:
            st.info("–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –±–æ–ª–µ–∑–Ω–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")